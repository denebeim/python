[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "StaticLiveServerTestCase",
        "importPath": "django.contrib.staticfiles.testing",
        "description": "django.contrib.staticfiles.testing",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles.testing",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "WebDriverException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "response",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "home_page",
        "importPath": "lists.views",
        "description": "lists.views",
        "isExtraImport": true,
        "detail": "lists.views",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "lists.models",
        "description": "lists.models",
        "isExtraImport": true,
        "detail": "lists.models",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "lists.models",
        "description": "lists.models",
        "isExtraImport": true,
        "detail": "lists.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "lists.models",
        "description": "lists.models",
        "isExtraImport": true,
        "detail": "lists.models",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "lists.models",
        "description": "lists.models",
        "isExtraImport": true,
        "detail": "lists.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "lists",
        "description": "lists",
        "isExtraImport": true,
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "lists",
        "description": "lists",
        "isExtraImport": true,
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "kind": 6,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "class Plugin(BaseModel):\n    path: str\n    name: str\n    url: str = None\n    description: str = None\ndef docker_works() -> bool:\n    logging.debug('running docker --help to make sure docker is installed')\n    process = subprocess.run(\"docker --help\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "docker_works",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def docker_works() -> bool:\n    logging.debug('running docker --help to make sure docker is installed')\n    process = subprocess.run(\"docker --help\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)\n    logging.debug(f'docker --help return code: %s', process.returncode)\n    return process.returncode == 0\ndef get_context_info() -> dict:\n    return {\n        'PYDEV_PROJECT_ROOT': os.getcwd()",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "get_context_info",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def get_context_info() -> dict:\n    return {\n        'PYDEV_PROJECT_ROOT': os.getcwd()\n    }\ndef stop_plugin(plugin: Plugin):\n    logging.debug(f'Shutting down plugin: {plugin.name}')\n    env = {**os.environ.copy(), **get_context_info()}\n    process = subprocess.run(f\"docker-compose -f {plugin.path} down --remove-orphans\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "stop_plugin",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def stop_plugin(plugin: Plugin):\n    logging.debug(f'Shutting down plugin: {plugin.name}')\n    env = {**os.environ.copy(), **get_context_info()}\n    process = subprocess.run(f\"docker-compose -f {plugin.path} down --remove-orphans\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,\n                             env=env)\n    logging.debug('shutdown complete with return code: %s', process.returncode)\n    if process.returncode != 0:\n        logging.debug('stdout: %s', process.stdout)",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "start_plugin",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def start_plugin(plugin: Plugin):\n    logging.debug(f'Starting plugin: {plugin.name}')\n    env = {**os.environ.copy(), **get_context_info()}\n    process = subprocess.run(f\"docker-compose -f {plugin.path} up -d\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,\n                             env=env)\n    logging.debug('start complete with return code: %s', process.returncode)\n    if process.returncode != 0:\n        logging.debug('stdout: %s', process.stdout)",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "get_plugins",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def get_plugins(plugins_dir: str) -> List[Plugin]:\n    logging.debug('Searching for plugins in %s', plugins_dir)\n    plugin_files = glob.glob(path.join(plugins_dir, '*.yml'))\n    plugin_files = plugin_files + glob.glob(path.join(plugins_dir, '*.yaml'))\n    plugin_files = list(set(plugin_files))\n    logging.debug('Plugin files: %s', plugin_files)\n    plugins = []\n    for plugin_file in plugin_files:\n        name, ext = os.path.splitext(os.path.basename(plugin_file))\n        comment_lines = []",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "docker_compose_works",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def docker_compose_works() -> bool:\n    logging.debug('running docker-compose --help to make sure it is installed')\n    process = subprocess.run(\"docker-compose --help\",\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)\n    logging.debug(f'docker-compose --help return code: %s', process.returncode)\n    return process.returncode == 0\ndef main(plugins_dir: str, verify: bool = False, *args, **kwargs):\n    if verify:\n        if not docker_works():",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.pydev",
        "description": ".venv.bin.pydev",
        "peekOfCode": "def main(plugins_dir: str, verify: bool = False, *args, **kwargs):\n    if verify:\n        if not docker_works():\n            logging.error('Docker does not seem to be installed, terminating')\n            exit(1)\n        if not docker_compose_works():\n            logging.error('Docker compose does not seem to be installed, terminating')\n            exit(1)\n    logging.debug('Creating plugins dir at %s', plugins_dir)\n    os.makedirs(plugins_dir, exist_ok=True)",
        "detail": ".venv.bin.pydev",
        "documentation": {}
    },
    {
        "label": "NewVisitorTest",
        "kind": 6,
        "importPath": "src.functional_tests.tests",
        "description": "src.functional_tests.tests",
        "peekOfCode": "class NewVisitorTest(StaticLiveServerTestCase):\n    def setUp(self):\n        self.browser = webdriver.Firefox()\n        test_server=os.environ.get(\"TEST_SERVER\")\n        if test_server:\n            self.live_server_url=\"http://\"+test_server\n    def tearDown(self):\n        self.browser.quit()\n    def wait_for_row_in_list_table(self, row_text):\n        start_time = time.time()",
        "detail": "src.functional_tests.tests",
        "documentation": {}
    },
    {
        "label": "MAX_WAIT",
        "kind": 5,
        "importPath": "src.functional_tests.tests",
        "description": "src.functional_tests.tests",
        "peekOfCode": "MAX_WAIT = 5\nclass NewVisitorTest(StaticLiveServerTestCase):\n    def setUp(self):\n        self.browser = webdriver.Firefox()\n        test_server=os.environ.get(\"TEST_SERVER\")\n        if test_server:\n            self.live_server_url=\"http://\"+test_server\n    def tearDown(self):\n        self.browser.quit()\n    def wait_for_row_in_list_table(self, row_text):",
        "detail": "src.functional_tests.tests",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0001_initial",
        "description": "src.lists.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Item',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            ],",
        "detail": "src.lists.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0002_item_text",
        "description": "src.lists.migrations.0002_item_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lists', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='text',\n            field=models.TextField(default=''),\n        ),",
        "detail": "src.lists.migrations.0002_item_text",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0003_list",
        "description": "src.lists.migrations.0003_list",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lists', '0002_item_text'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='List',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            ],",
        "detail": "src.lists.migrations.0003_list",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0004_item_list",
        "description": "src.lists.migrations.0004_item_list",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lists', '0003_list'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='list',\n            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='lists.list'),\n        ),",
        "detail": "src.lists.migrations.0004_item_list",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0005_remove_item_list",
        "description": "src.lists.migrations.0005_remove_item_list",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lists', '0004_item_list'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='item',\n            name='list',\n        ),\n    ]",
        "detail": "src.lists.migrations.0005_remove_item_list",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.lists.migrations.0006_item_list",
        "description": "src.lists.migrations.0006_item_list",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lists', '0005_remove_item_list'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='list',\n            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='lists.list'),\n        ),",
        "detail": "src.lists.migrations.0006_item_list",
        "documentation": {}
    },
    {
        "label": "ListsConfig",
        "kind": 6,
        "importPath": "src.lists.apps",
        "description": "src.lists.apps",
        "peekOfCode": "class ListsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'lists'",
        "detail": "src.lists.apps",
        "documentation": {}
    },
    {
        "label": "List",
        "kind": 6,
        "importPath": "src.lists.models",
        "description": "src.lists.models",
        "peekOfCode": "class List(models.Model):\n    pass\nclass Item(models.Model):\n    text = models.TextField(default=\"\")\n    list = models.ForeignKey(List, default=None, on_delete=models.CASCADE)",
        "detail": "src.lists.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.lists.models",
        "description": "src.lists.models",
        "peekOfCode": "class Item(models.Model):\n    text = models.TextField(default=\"\")\n    list = models.ForeignKey(List, default=None, on_delete=models.CASCADE)",
        "detail": "src.lists.models",
        "documentation": {}
    },
    {
        "label": "NewListTest",
        "kind": 6,
        "importPath": "src.lists.tests",
        "description": "src.lists.tests",
        "peekOfCode": "class NewListTest(TestCase):\n    def test_can_save_a_POST_request(self):\n        self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.first()\n        self.assertEqual(new_item.text, \"A new list item\")\n    def test_redirects_after_POST(self):\n        response = self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        new_list = List.objects.get()\n        self.assertRedirects(response, f\"/lists/{new_list.id}/\")",
        "detail": "src.lists.tests",
        "documentation": {}
    },
    {
        "label": "ListViewTest",
        "kind": 6,
        "importPath": "src.lists.tests",
        "description": "src.lists.tests",
        "peekOfCode": "class ListViewTest(TestCase):\n    def test_uses_list_template(self):\n        mylist = List.objects.create()\n        response = self.client.get(f\"/lists/{mylist.id}/\")\n        self.assertTemplateUsed(response, \"list.html\")\n    def test_displays_all_list_items(self):\n        correct_list = List.objects.create()\n        Item.objects.create(text=\"itemey 1\", list=correct_list)\n        Item.objects.create(text=\"itemey 2\", list=correct_list)\n        other_list = List.objects.create()",
        "detail": "src.lists.tests",
        "documentation": {}
    },
    {
        "label": "ListAndItemModelTest",
        "kind": 6,
        "importPath": "src.lists.tests",
        "description": "src.lists.tests",
        "peekOfCode": "class ListAndItemModelTest(TestCase):\n    def test_saving_and_retrieving_items(self):\n        mylist = List.objects.create()\n        first_item = Item()\n        first_item.text = \"The first (ever) list item\"\n        first_item.list = mylist\n        first_item.save()\n        second_item = Item()\n        second_item.text = \"Item the second\"\n        second_item.list = mylist",
        "detail": "src.lists.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.lists.urls",
        "description": "src.lists.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"new\",\n        views.new_list,\n        name=\"new_list\",\n    ),\n    path(\n        \"<int:list_id>/\",\n        views.view_list,\n        name=\"view_list\",",
        "detail": "src.lists.urls",
        "documentation": {}
    },
    {
        "label": "home_page",
        "kind": 2,
        "importPath": "src.lists.views",
        "description": "src.lists.views",
        "peekOfCode": "def home_page(request):\n    return render(request, \"home.html\")\ndef view_list(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    return render(request, \"list.html\", {\"list\": our_list})\ndef new_list(request):\n    nulist = List.objects.create()\n    Item.objects.create(text=request.POST[\"item_text\"], list=nulist)\n    return redirect(f\"/lists/{nulist.id}/\")\ndef add_item(request, list_id):",
        "detail": "src.lists.views",
        "documentation": {}
    },
    {
        "label": "view_list",
        "kind": 2,
        "importPath": "src.lists.views",
        "description": "src.lists.views",
        "peekOfCode": "def view_list(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    return render(request, \"list.html\", {\"list\": our_list})\ndef new_list(request):\n    nulist = List.objects.create()\n    Item.objects.create(text=request.POST[\"item_text\"], list=nulist)\n    return redirect(f\"/lists/{nulist.id}/\")\ndef add_item(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    Item.objects.create(text=request.POST[\"item_text\"], list=our_list)",
        "detail": "src.lists.views",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 2,
        "importPath": "src.lists.views",
        "description": "src.lists.views",
        "peekOfCode": "def new_list(request):\n    nulist = List.objects.create()\n    Item.objects.create(text=request.POST[\"item_text\"], list=nulist)\n    return redirect(f\"/lists/{nulist.id}/\")\ndef add_item(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    Item.objects.create(text=request.POST[\"item_text\"], list=our_list)\n    return redirect(f\"/lists/{our_list.id}/\")",
        "detail": "src.lists.views",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "src.lists.views",
        "description": "src.lists.views",
        "peekOfCode": "def add_item(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    Item.objects.create(text=request.POST[\"item_text\"], list=our_list)\n    return redirect(f\"/lists/{our_list.id}/\")",
        "detail": "src.lists.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.superlists.asgi",
        "description": "src.superlists.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "src.superlists.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nif \"DJANGO_DEBUG_FALSE\" in os.environ:\n    SECRET_KEY = os.environ[\"DJANGO_SECRET_KEY\"]\n    DEBUG = False\n    ALLOWED_HOSTS=[os.environ[\"DJANGO_ALLOWED_HOSTS\"]]\nelse:\n    SECRET_KEY = \"django-insecure--at#+pdndd$p9w%w2-xedgwuzbhwh(ejy#6fdap(ztt8qyos&3\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"lists\",\n]\nMIDDLEWARE = [",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"whitenoise.middleware.WhiteNoiseMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "ROOT_URLCONF = \"superlists.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "WSGI_APPLICATION = \"superlists.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "src.superlists.settings",
        "description": "src.superlists.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "src.superlists.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.superlists.urls",
        "description": "src.superlists.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/\", include(\"lists.urls\")),\n]",
        "detail": "src.superlists.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.superlists.wsgi",
        "description": "src.superlists.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "src.superlists.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.manage",
        "description": "src.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'superlists.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "src.manage",
        "documentation": {}
    }
]